#!/usr/bin/env node
var debug = require('debug')('tutoronline');
var app = require('../app');
var server = app.listen((process.env.PORT || 3000), (process.env.IP || '127.0.0.1'));
var socketManagement = require('../sockets/sockets')
socketAdmin = new socketManagement(3000,27000);
//imageSocket
socketAdmin.createSocket(server,function(error,socketCreated){
	var lastData = null;
	var message = {};
	var messageLog = [];
	var privateMessagesLog = [];
	var usernameIndex = {};
    var socketIdIndex = {};
	if(error){
		console.log("Error creating new socket!");
		console.error(error);
		return;
	}

	socketCreated.of('/notificationNamespace').on('connection', function(socket){
		console.log("Connected to notificationNamespace");
		socket.on('userConnected',function (data){
			console.log("Notification new user connected");
			socketCreated.of('/notificationNamespace').emit('refreshUserList',usernameIndex);
		});
		socket.on('userDisconnected',function (data){
			console.log("Notification a user has disconnected");
			socketCreated.of('/notificationNamespace').emit('refreshUserList',usernameIndex);
		});
		socket.on('getUserList',function (){
			console.log("Getting user list");
			socketCreated.of('/notificationNamespace').emit('refreshUserList',usernameIndex);
		});
		socket.on('disconnect',function(){
			console.log("disconnected!!! from Notification Namespace");
		});
	});

	socketCreated.of('/messageNamespace').on('connection', function(socket){
		socket.on('getLastChat',function(data){
			console.log(messageLog);
			socketCreated.emit('syncMessages',messageLog.slice(Math.max(messageLog.length-3,1)));
		});
		socket.on('message',function(data){
			//
			message.content = data.content;
			message.user = data.user;
			message.date = new Date();
			messageLog.push(message);
			//
			socketCreated.of('/messageNamespace').emit('incommingMessage',data);
		});
		socket.on('privateMessage',function(data){
			message.content = data.content;
			message.from = data.user;
			message.to = data.to;
			message.date = new Date();
			privateMessagesLog.push(message);
			socketCreated.of('/messageNamespace').to(usernameIndex[message.to]).emit('receivePrivate',data);
		});
		socket.on('register',function register(data){
			usernameIndex[data.user] = data.socketId;
			socketIdIndex[data.socketId] = data.user;
			console.log(usernameIndex);
			console.log(socketIdIndex);
			socketCreated.of('notificationNamespace').emit('userConnected',usernameIndex);
		});
		socket.on('disconnect', function (data) {
		    var username = socketIdIndex[socket.id];
	        var socketId = usernameIndex[username];
	        console.log(username+" has disconnected");
	        console.log(username+" has disconnected");
	        console.log(username+" has disconnected");
	        delete usernameIndex[username];
	        delete socketIdIndex[socketId];
		    console.log("----------------Username Index-------------------------");
			console.log(usernameIndex);
			console.log("----------------SocketID Index-------------------------");
			console.log(socketIdIndex);
			console.log("-------------------------------------------------------");
			socketCreated.of('notificationNamespace').emit('userDisconnected',usernameIndex);
		});
	});
});