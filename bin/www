#!/usr/bin/env node
var debug = require('debug')('simple web chat');
var app = require('../app');
var fs = require('fs');
var server = app.listen((process.env.PORT || 80), (process.env.IP || '0.0.0.0'), function serverStarted() {
  console.log("Server started at: " + (process.env.PORT || 80));
});
var socketManagement = require('../sockets/sockets')
webSocket = new socketManagement(80, 27000);
webSocket.createSocket(server, function (error, socketInstance) {
  var lastData = null;
  var message = {};
  var messageLog = [];
  var privateMessagesLog = [];
  var usernameIndex = {};
  var socketIdIndex = {};
  var imageContent;

  if (error) {
    console.log("Error creating new socket!");
    console.error(error);
    return;
  }

  socketInstance.of('/notificationNamespace').on('connection', function (socket) {
    console.log("Connected to notificationNamespace");
    // User events
    socket.on('userConnected', function (data) {
      console.log("Notification new user connected");
      socketInstance.of('/notificationNamespace').emit('refreshUserList', usernameIndex);
    });
    socket.on('userDisconnected', function (data) {
      console.log("Notification a user has disconnected");
      socketInstance.of('/notificationNamespace').emit('refreshUserList', usernameIndex);
    });
    socket.on('getUserList', function () {
      console.log("Getting user list");
      socketInstance.of('/notificationNamespace').emit('refreshUserList', usernameIndex);
    });
    socket.on('disconnect', function () {
      console.log("disconnected!!! from Notification Namespace");
      socketInstance.of('/notificationNamespace').emit('refreshUserList', usernameIndex);
    });
    // Files events
    socket.on('getUploadedFiles', function () {
      var files = fs.readdirSync('./public/uploads/');
      socketInstance.of('/notificationNamespace').emit('refreshFileList',files);
    });
  });

  socketInstance.of('/messageNamespace').on('connection', function (socket) {
    socket.on('getLastChat', function (data) {      
      socketInstance.of('/messageNamespace').to(socket.id).emit('syncMessages', messageLog.slice(-10));
    });

    socket.on('message', function (data) {
      //
      message.content = data.content;
      message.user = data.user;
      message.date = new Date();
      messageLog.push(message);
      //
      socketInstance.of('/messageNamespace').emit('incommingMessage', data);
    });
    socket.on('privateMessage', function (data) {
      message.content = data.content;
      message.from = data.user;
      message.to = data.to;
      message.date = new Date();
      privateMessagesLog.push(message);
      socketInstance.of('/messageNamespace').to(usernameIndex[message.to]).emit('receivePrivate', data);
    });
    socket.on('register', function register(data) {
      usernameIndex[data.user] = data.socketId;
      socketIdIndex[data.socketId] = data.user;      
      socketInstance.of('/notificationNamespace').emit('userConnected', usernameIndex);
    });
    socket.on('disconnect', function (data) {
      var username = socketIdIndex[socket.id];
      var socketId = usernameIndex[username];      
      delete usernameIndex[username];
      delete socketIdIndex[socketId];      
      socketInstance.of('/notificationNamespace').emit('refreshUserList', usernameIndex);
      socketInstance.of('/notificationNamespace').emit('userDisconnected', usernameIndex);
    });
  });

  socketInstance.of('/boardNamespace').on('connection', function boardNamespace(socket){
    console.log("Connected to board namespace");
    socket.on('sync', function syncBoard(data){
      imageContent = data;
      socket.broadcast.emit('image',data);
    });
    socket.on('getLastContent', function getBoardLastContent(){
      socket.emit('image', imageContent);
    });
  });
});